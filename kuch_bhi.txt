Hint 1
Think about small substrings.

Hint 2
What are the strings that satisfy the given conditions?

Hint 3
If you got WA on pretest 2, then you're probably not checking 7 length strings.

solution

Tl;dr: The following are all the possible minimal substrings (there aren't that many) which satisfy the given conditions: "aa", "aba", "aca", "abca", "acba", "abbacca", "accabba". Any other string that satisfies the condition contains at least one of these as a substring, and hence is not the optimal substring for the answer.

Claim: If a substring exists which satisfies the given conditions, then the length of the shortest such substring is at most 7. Otherwise the solution does not exist.

Proof: Let us consider that the solution exists. We will try to prove this by breaking this into the following cases:

Case 1: There exist two such "a" whose distance is less than or equal to 2, where distance is the absolute difference of their indices.

In this case where there are two such "a" whose distance is less than 2, then either these two "a" are present consecutive or there is only one single letter between these two "a". All these minimal substrings are "aa", "aba" and "aca"which satisfies all the given conditions.
Hence we can say that the shortest length of such substring that satisfies the given conditions is at most 3 in this case.

Case 2: There exists no two such "a" whose distance is less than or equal to 2.

In this case all the consecutive occurrences of "a" are present at a distance at least 3. Then in order for the number of "a" to be bigger than that of "b" and "c" the string must look like "a??a??a??a??a".
Let us define "??" as a block. Now if there is any block consisting of different characters i.e "bc" or "cb" then the substring "a??a" will satisfy all the given conditions and hence the minimal length will be 4.
Notice that there must be at least one block of "bb" and atleast one block of "cc", otherwise "a" will not be in a majority. Hence, there must exist 2 consecutive blocks equal to "bb" and "cc" or "cc" and "bb" in the string (otherwise all blocks would be of the same character). Hence we can pick the substring "abbacca" or "accabba" which satisfies the given conditions. The minimal length is, therefore, 7 in this case.
Therefore we can say that the shortest length of such substring that satisfies the given conditions is at most 7 in this case.

Thus, it suffices to only check all substrings of length up to 7 and find the smallest among them that satisfies the given conditions (or report that it does not exist).

Time Complexity: O(7â‹…n)
Solution [c++] (AshishGup)
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long
 
const int N = 1e6 + 5;
 
int n;
string s;
 
int32_t main()
{
	IOS;
	int t;
	cin >> t;
	while(t--)
	{
		cin >> n >> s;
		int ans = 1e9;
		for(int i = 0; i < n; i++)
		{
			vector<int> f(3, 0);
			f[s[i] - 'a']++;
			for(int j = i + 1; j < min(n, i + 7); j++)
			{
				f[s[j] - 'a']++;
				if(f[0] > f[1] && f[0] > f[2])
					ans = min(ans, j - i + 1);
			}
		}
		if(ans == 1e9)
			ans = -1;
		cout << ans << endl;
	}
	return 0;
}